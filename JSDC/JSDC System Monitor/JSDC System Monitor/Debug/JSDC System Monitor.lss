
JSDC System Monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000708  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000079c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000af8  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001e3  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000094e  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000236  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001d2  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	db c2       	rjmp	.+1462   	; 0x5be <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	95 c2       	rjmp	.+1322   	; 0x538 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 36       	cpi	r26, 0x65	; 101
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	dd d2       	rcall	.+1466   	; 0x614 <main>
  5a:	54 c3       	rjmp	.+1704   	; 0x704 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <get12VBattery>:
	
	//LED #3
	//red
	SPDR =regularBright;
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  5e:	39 98       	cbi	0x07, 1	; 7
	{
	}
	
	//LED #3
	//nothing
	SPDR =0;
  60:	38 9a       	sbi	0x07, 0	; 7
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  62:	36 9a       	sbi	0x06, 6	; 6
  64:	8f e9       	ldi	r24, 0x9F	; 159
	{
	}
	
	//LED #3
	//blue
	SPDR =0;
  66:	9f e0       	ldi	r25, 0x0F	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <get12VBattery+0xa>
	{
	}
	
	//LED #4
	//green
	SPDR =125;
  6c:	00 c0       	rjmp	.+0      	; 0x6e <get12VBattery+0x10>
  6e:	00 00       	nop
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  70:	85 b1       	in	r24, 0x05	; 5
  72:	87 3e       	cpi	r24, 0xE7	; 231
	{
	}
	
	//LED #4
	//nothing
	SPDR =0;
  74:	20 f4       	brcc	.+8      	; 0x7e <get12VBattery+0x20>
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	80 93 62 00 	sts	0x0062, r24
	{
	}
	
	//LED #4
	//red
	SPDR =shiftedBright;
  7c:	08 95       	ret
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  7e:	10 92 62 00 	sts	0x0062, r1
	}
	
	
	//LED #4
	//blue
	SPDR =0;
  82:	08 95       	ret

00000084 <get24VBattery>:
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  84:	39 98       	cbi	0x07, 1	; 7
  86:	38 98       	cbi	0x07, 0	; 7
	{
	}
	
	//LED #5
	//nothing
	SPDR =0;
  88:	36 9a       	sbi	0x06, 6	; 6
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  8a:	8f e9       	ldi	r24, 0x9F	; 159
  8c:	9f e0       	ldi	r25, 0x0F	; 15
	{
	}
	
	//LED #5
	//green
	SPDR =125;
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <get24VBattery+0xa>
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  92:	00 c0       	rjmp	.+0      	; 0x94 <get24VBattery+0x10>
  94:	00 00       	nop
	{
	}
	
	//LED #5
	//red
	SPDR =regularBright;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 3f       	cpi	r24, 0xF8	; 248
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  9a:	20 f4       	brcc	.+8      	; 0xa4 <get24VBattery+0x20>
  9c:	81 e0       	ldi	r24, 0x01	; 1
	{
	}
	
	//LED #5
	//nothing/blue overlap
	SPDR =0;
  9e:	80 93 61 00 	sts	0x0061, r24
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  a2:	08 95       	ret
	{
	}
	
	//LED #5
	//blue
	SPDR =0;
  a4:	10 92 61 00 	sts	0x0061, r1
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  a8:	08 95       	ret

000000aa <red>:
	{
	}
	
	//LED #6
	//green
	SPDR =125;
  aa:	c1 9a       	sbi	0x18, 1	; 24
  ac:	8f e9       	ldi	r24, 0x9F	; 159
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  ae:	9f e0       	ldi	r25, 0x0F	; 15
  b0:	01 97       	sbiw	r24, 0x01	; 1
	{
	}
	
	//LED #6
	//nothing
	SPDR =0;
  b2:	f1 f7       	brne	.-4      	; 0xb0 <red+0x6>
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <red+0xc>
  b6:	00 00       	nop
	{
	}
	
	//LED #6
	//red
	SPDR =shiftedBright;
  b8:	c1 98       	cbi	0x18, 1	; 24
  ba:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <red+0x12>
	{
	}
	
	//LED #6
	//blue
	SPDR =0;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  c2:	8f b9       	out	0x0f, r24	; 15
  c4:	77 9b       	sbis	0x0e, 7	; 14
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <red+0x1a>
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  c8:	1f b8       	out	0x0f, r1	; 15
  ca:	77 9b       	sbis	0x0e, 7	; 14
	{
	}
	
	//LED #7
	//green
	SPDR =125;
  cc:	fe cf       	rjmp	.-4      	; 0xca <red+0x20>
  ce:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <red+0x26>
	{
	}
	
	//LED #7
	//red
	SPDR =regularBright;
  d4:	1f b8       	out	0x0f, r1	; 15
  d6:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <red+0x2c>
  da:	1f b8       	out	0x0f, r1	; 15
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
  dc:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  de:	fe cf       	rjmp	.-4      	; 0xdc <red+0x32>
  e0:	8f ef       	ldi	r24, 0xFF	; 255
	{
	}
	
	//LED #7
	//blue
	SPDR = 0;
  e2:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <red+0x3a>
	}


	//LED #8
	//green
	SPDR = 125;
  e8:	1f b8       	out	0x0f, r1	; 15
  ea:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  ec:	fe cf       	rjmp	.-4      	; 0xea <red+0x40>
  ee:	1f b8       	out	0x0f, r1	; 15
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
  f0:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <red+0x46>
  f4:	1f b8       	out	0x0f, r1	; 15
	{
	}
	
	//LED #8
	//red
	SPDR =shiftedBright;
  f6:	77 9b       	sbis	0x0e, 7	; 14
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <red+0x4c>
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8f b9       	out	0x0f, r24	; 15
	{
	}
	
	//LED #8
	//blue
	SPDR = 0;
  fe:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 100:	fe cf       	rjmp	.-4      	; 0xfe <red+0x54>
 102:	1f b8       	out	0x0f, r1	; 15
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 104:	77 9b       	sbis	0x0e, 7	; 14
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 106:	fe cf       	rjmp	.-4      	; 0x104 <red+0x5a>
 108:	1f b8       	out	0x0f, r1	; 15
	{
	}
	
	PORTB |= (1<<Shift_Latch);
 10a:	77 9b       	sbis	0x0e, 7	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	fe cf       	rjmp	.-4      	; 0x10a <red+0x60>
 10e:	1f b8       	out	0x0f, r1	; 15
 110:	77 9b       	sbis	0x0e, 7	; 14
 112:	fe cf       	rjmp	.-4      	; 0x110 <red+0x66>
 114:	1f b8       	out	0x0f, r1	; 15
 116:	77 9b       	sbis	0x0e, 7	; 14
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 118:	fe cf       	rjmp	.-4      	; 0x116 <red+0x6c>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
	{
	}
	
	//LED #4
	//red
	SPDR =shiftedBright;
 11c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <red+0x74>
	}
	
	
	//LED #4
	//blue
	SPDR =0;
 122:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <red+0x7a>
	{
	}
	
	//LED #5
	//nothing
	SPDR =0;
 128:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <red+0x80>
	{
	}
	
	//LED #5
	//green
	SPDR =0;
 12e:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <red+0x86>
	{
	}
	
	//LED #5
	//red
	SPDR =regularBright;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 138:	77 9b       	sbis	0x0e, 7	; 14
 13a:	fe cf       	rjmp	.-4      	; 0x138 <red+0x8e>
	{
	}
	
	//LED #5
	//nothing/blue overlap
	SPDR =0;
 13c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 13e:	77 9b       	sbis	0x0e, 7	; 14
 140:	fe cf       	rjmp	.-4      	; 0x13e <red+0x94>
	{
	}
	
	//LED #5
	//blue
	SPDR =0;
 142:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 144:	77 9b       	sbis	0x0e, 7	; 14
 146:	fe cf       	rjmp	.-4      	; 0x144 <red+0x9a>
	{
	}
	
	//LED #6
	//green
	SPDR =0;
 148:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 14a:	77 9b       	sbis	0x0e, 7	; 14
 14c:	fe cf       	rjmp	.-4      	; 0x14a <red+0xa0>
	{
	}
	
	//LED #6
	//nothing
	SPDR =0;
 14e:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <red+0xa6>
	{
	}
	
	//LED #6
	//red
	SPDR =shiftedBright;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <red+0xae>
	{
	}
	
	//LED #6
	//blue
	SPDR =0;
 15c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 15e:	77 9b       	sbis	0x0e, 7	; 14
 160:	fe cf       	rjmp	.-4      	; 0x15e <red+0xb4>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 162:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 164:	77 9b       	sbis	0x0e, 7	; 14
 166:	fe cf       	rjmp	.-4      	; 0x164 <red+0xba>
	{
	}
	
	//LED #7
	//green
	SPDR =0;
 168:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 16a:	77 9b       	sbis	0x0e, 7	; 14
 16c:	fe cf       	rjmp	.-4      	; 0x16a <red+0xc0>
	{
	}
	
	//LED #7
	//red
	SPDR =regularBright;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 172:	77 9b       	sbis	0x0e, 7	; 14
 174:	fe cf       	rjmp	.-4      	; 0x172 <red+0xc8>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 176:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 178:	77 9b       	sbis	0x0e, 7	; 14
 17a:	fe cf       	rjmp	.-4      	; 0x178 <red+0xce>
	{
	}
	
	//LED #7
	//blue
	SPDR = 0;
 17c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <red+0xd4>
	}


	//LED #8
	//green
	SPDR = 0;
 182:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 184:	77 9b       	sbis	0x0e, 7	; 14
 186:	fe cf       	rjmp	.-4      	; 0x184 <red+0xda>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 188:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 18a:	77 9b       	sbis	0x0e, 7	; 14
 18c:	fe cf       	rjmp	.-4      	; 0x18a <red+0xe0>
	{
	}
	
	//LED #8
	//red
	SPDR =shiftedBright;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 192:	77 9b       	sbis	0x0e, 7	; 14
 194:	fe cf       	rjmp	.-4      	; 0x192 <red+0xe8>
	{
	}
	
	//LED #8
	//blue
	SPDR = 0;
 196:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 198:	77 9b       	sbis	0x0e, 7	; 14
 19a:	fe cf       	rjmp	.-4      	; 0x198 <red+0xee>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 19c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 19e:	77 9b       	sbis	0x0e, 7	; 14
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <red+0xf4>
	{
	}
	
	PORTB |= (1<<Shift_Latch);
 1a2:	c2 9a       	sbi	0x18, 2	; 24
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <red+0xfe>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <red+0x104>
 1ae:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 1b0:	c2 98       	cbi	0x18, 2	; 24
 1b2:	08 95       	ret

000001b4 <green>:
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
}// end blue
void green (void)
{
	PORTB |= (1<<Blank_LEDS);
 1b4:	c1 9a       	sbi	0x18, 1	; 24
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <green+0x6>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <green+0xc>
 1c0:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Blank_LEDS);
 1c2:	c1 98       	cbi	0x18, 1	; 24

	//green
	SPDR =regularBright;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1c8:	77 9b       	sbis	0x0e, 7	; 14
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <green+0x14>
	{
	}

	//red
	SPDR =0;
 1cc:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1ce:	77 9b       	sbis	0x0e, 7	; 14
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <green+0x1a>
	{
	}
	
	//blue
	SPDR =0;
 1d2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1d4:	77 9b       	sbis	0x0e, 7	; 14
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <green+0x20>
	{
	}
	
	SPDR = 0;
 1d8:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1da:	77 9b       	sbis	0x0e, 7	; 14
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <green+0x26>
	{
	}

	//LED #2
	//green
	SPDR = shiftedBright;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <green+0x2e>
	{
	}
	//nothing?
	SPDR = 0;
 1e6:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1e8:	77 9b       	sbis	0x0e, 7	; 14
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <green+0x34>
	{
	}
	
	//red
	SPDR = 0;
 1ec:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <green+0x3a>
	{
	}
	
	//blue
	SPDR = 0;
 1f2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <green+0x40>
	{
	}
	
	////LED #3
	//nothing
	SPDR =0;
 1f8:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 1fa:	77 9b       	sbis	0x0e, 7	; 14
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <green+0x46>
	{
	}
	
	//LED #3
	//green
	SPDR =regularBright;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 202:	77 9b       	sbis	0x0e, 7	; 14
 204:	fe cf       	rjmp	.-4      	; 0x202 <green+0x4e>
	{
	}
	
	//LED #3
	//red
	SPDR =0;
 206:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 208:	77 9b       	sbis	0x0e, 7	; 14
 20a:	fe cf       	rjmp	.-4      	; 0x208 <green+0x54>
	{
	}
	
	//LED #3
	//nothing
	SPDR =0;
 20c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 20e:	77 9b       	sbis	0x0e, 7	; 14
 210:	fe cf       	rjmp	.-4      	; 0x20e <green+0x5a>
	{
	}
	
	//LED #3
	//blue
	SPDR =0;
 212:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 214:	77 9b       	sbis	0x0e, 7	; 14
 216:	fe cf       	rjmp	.-4      	; 0x214 <green+0x60>
	{
	}
	
	//LED #4
	//green
	SPDR =shiftedBright;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 21c:	77 9b       	sbis	0x0e, 7	; 14
 21e:	fe cf       	rjmp	.-4      	; 0x21c <green+0x68>
	{
	}
	
	//LED #4
	//nothing
	SPDR =0;
 220:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 222:	77 9b       	sbis	0x0e, 7	; 14
 224:	fe cf       	rjmp	.-4      	; 0x222 <green+0x6e>
	{
	}
	
	//LED #4
	//red
	SPDR =0;
 226:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <green+0x74>
	}
	
	
	//LED #4
	//blue
	SPDR =0;
 22c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 22e:	77 9b       	sbis	0x0e, 7	; 14
 230:	fe cf       	rjmp	.-4      	; 0x22e <green+0x7a>
	{
	}
	
	//LED #5
	//nothing
	SPDR =0;
 232:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 234:	77 9b       	sbis	0x0e, 7	; 14
 236:	fe cf       	rjmp	.-4      	; 0x234 <green+0x80>
	{
	}
	
	//LED #5
	//green
	SPDR =regularBright;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 23c:	77 9b       	sbis	0x0e, 7	; 14
 23e:	fe cf       	rjmp	.-4      	; 0x23c <green+0x88>
	{
	}
	
	//LED #5
	//red
	SPDR =0;
 240:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 242:	77 9b       	sbis	0x0e, 7	; 14
 244:	fe cf       	rjmp	.-4      	; 0x242 <green+0x8e>
	{
	}
	
	//LED #5
	//nothing/blue overlap
	SPDR =0;
 246:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 248:	77 9b       	sbis	0x0e, 7	; 14
 24a:	fe cf       	rjmp	.-4      	; 0x248 <green+0x94>
	{
	}
	
	//LED #5
	//blue
	SPDR =0;
 24c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 24e:	77 9b       	sbis	0x0e, 7	; 14
 250:	fe cf       	rjmp	.-4      	; 0x24e <green+0x9a>
	{
	}
	
	//LED #6
	//green
	SPDR =shiftedBright;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 256:	77 9b       	sbis	0x0e, 7	; 14
 258:	fe cf       	rjmp	.-4      	; 0x256 <green+0xa2>
	{
	}
	
	//LED #6
	//nothing
	SPDR =0;
 25a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 25c:	77 9b       	sbis	0x0e, 7	; 14
 25e:	fe cf       	rjmp	.-4      	; 0x25c <green+0xa8>
	{
	}
	
	//LED #6
	//red
	SPDR =0;
 260:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 262:	77 9b       	sbis	0x0e, 7	; 14
 264:	fe cf       	rjmp	.-4      	; 0x262 <green+0xae>
	{
	}
	
	//LED #6
	//blue
	SPDR =0;
 266:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 268:	77 9b       	sbis	0x0e, 7	; 14
 26a:	fe cf       	rjmp	.-4      	; 0x268 <green+0xb4>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 26c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 26e:	77 9b       	sbis	0x0e, 7	; 14
 270:	fe cf       	rjmp	.-4      	; 0x26e <green+0xba>
	{
	}
	
	//LED #7
	//green
	SPDR =regularBright;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 276:	77 9b       	sbis	0x0e, 7	; 14
 278:	fe cf       	rjmp	.-4      	; 0x276 <green+0xc2>
	{
	}
	
	//LED #7
	//red
	SPDR =0;
 27a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 27c:	77 9b       	sbis	0x0e, 7	; 14
 27e:	fe cf       	rjmp	.-4      	; 0x27c <green+0xc8>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 280:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 282:	77 9b       	sbis	0x0e, 7	; 14
 284:	fe cf       	rjmp	.-4      	; 0x282 <green+0xce>
	{
	}
	
	//LED #7
	//blue
	SPDR = 0;
 286:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <green+0xd4>
	}


	//LED #8
	//green
	SPDR = shiftedBright;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 290:	77 9b       	sbis	0x0e, 7	; 14
 292:	fe cf       	rjmp	.-4      	; 0x290 <green+0xdc>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 294:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 296:	77 9b       	sbis	0x0e, 7	; 14
 298:	fe cf       	rjmp	.-4      	; 0x296 <green+0xe2>
	{
	}
	
	//LED #8
	//red
	SPDR =0;
 29a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <green+0xe8>
	{
	}
	
	//LED #8
	//blue
	SPDR = 0;
 2a0:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 2a2:	77 9b       	sbis	0x0e, 7	; 14
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <green+0xee>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 2a6:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 2a8:	77 9b       	sbis	0x0e, 7	; 14
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <green+0xf4>
	{
	}
	
	PORTB |= (1<<Shift_Latch);
 2ac:	c2 9a       	sbi	0x18, 2	; 24
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <green+0xfe>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <green+0x104>
 2b8:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 2ba:	c2 98       	cbi	0x18, 2	; 24
 2bc:	08 95       	ret

000002be <blank>:
}
void blank (void)
{
	
	//bytesSentToLEDS=0;
	PORTB |= (1<<Blank_LEDS);
 2be:	c1 9a       	sbi	0x18, 1	; 24
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <blank+0x6>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <blank+0xc>
 2ca:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Blank_LEDS);
 2cc:	c1 98       	cbi	0x18, 1	; 24

	for (bytesSentToLEDS = 0; bytesSentToLEDS<36; bytesSentToLEDS++)
 2ce:	10 92 64 00 	sts	0x0064, r1
 2d2:	10 92 63 00 	sts	0x0063, r1
	{
		
		SPDR = 0;
 2d6:	1f b8       	out	0x0f, r1	; 15
		/* Wait for transmission complete */
		while ((SPSR & (1 << SPIF)) == 0)
 2d8:	77 9b       	sbis	0x0e, 7	; 14
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <blank+0x1a>
	//bytesSentToLEDS=0;
	PORTB |= (1<<Blank_LEDS);
	_delay_ms(1);
	PORTB &= ~(1<<Blank_LEDS);

	for (bytesSentToLEDS = 0; bytesSentToLEDS<36; bytesSentToLEDS++)
 2dc:	80 91 63 00 	lds	r24, 0x0063
 2e0:	90 91 64 00 	lds	r25, 0x0064
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 64 00 	sts	0x0064, r25
 2ea:	80 93 63 00 	sts	0x0063, r24
 2ee:	84 97       	sbiw	r24, 0x24	; 36
 2f0:	94 f3       	brlt	.-28     	; 0x2d6 <blank+0x18>
		while ((SPSR & (1 << SPIF)) == 0)
		{
		}
		
	}
	PORTB |= (1<<Shift_Latch);
 2f2:	c2 9a       	sbi	0x18, 2	; 24
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <blank+0x3a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <blank+0x40>
 2fe:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 300:	c2 98       	cbi	0x18, 2	; 24
 302:	08 95       	ret

00000304 <yellow>:
	
	
}
void yellow (void)
{
	PORTB |= (1<<Blank_LEDS);
 304:	c1 9a       	sbi	0x18, 1	; 24
 306:	8f e9       	ldi	r24, 0x9F	; 159
 308:	9f e0       	ldi	r25, 0x0F	; 15
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <yellow+0x6>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <yellow+0xc>
 310:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Blank_LEDS);
 312:	c1 98       	cbi	0x18, 1	; 24

	//LED #1
	//green
	SPDR =255;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 318:	77 9b       	sbis	0x0e, 7	; 14
 31a:	fe cf       	rjmp	.-4      	; 0x318 <yellow+0x14>
	{
	}
	
	//LED #1
	//red
	SPDR =255;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <yellow+0x1c>
	{
	}
	
	//LED #1
	//green upper / red lower
	SPDR = 0;
 324:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 326:	77 9b       	sbis	0x0e, 7	; 14
 328:	fe cf       	rjmp	.-4      	; 0x326 <yellow+0x22>
	{
	}
	
	//LED #1
	//blue
	SPDR = 0;
 32a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <yellow+0x28>
	{
	}

	//LED #2
	//green
	SPDR = 255;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 334:	77 9b       	sbis	0x0e, 7	; 14
 336:	fe cf       	rjmp	.-4      	; 0x334 <yellow+0x30>
	{
	}
	//LED #2
	//nothing
	SPDR = 0;
 338:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <yellow+0x36>
	{
	}
	//LED #2
	//red
	SPDR = 255;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 342:	77 9b       	sbis	0x0e, 7	; 14
 344:	fe cf       	rjmp	.-4      	; 0x342 <yellow+0x3e>
	{
	}
	//LED #2
	//blue
	SPDR = 0;
 346:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 348:	77 9b       	sbis	0x0e, 7	; 14
 34a:	fe cf       	rjmp	.-4      	; 0x348 <yellow+0x44>
	{
	}
	
	////LED #3
	//nothing
	SPDR = 0;
 34c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 34e:	77 9b       	sbis	0x0e, 7	; 14
 350:	fe cf       	rjmp	.-4      	; 0x34e <yellow+0x4a>
	{
	}
	
	//LED #3
	//green
	SPDR =255;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 356:	77 9b       	sbis	0x0e, 7	; 14
 358:	fe cf       	rjmp	.-4      	; 0x356 <yellow+0x52>
	{
	}
	
	//LED #3
	//red
	SPDR = 255;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <yellow+0x5a>
	}
	
	//LED #3
	//nothing
	//lower red
	SPDR = 0;
 362:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 364:	77 9b       	sbis	0x0e, 7	; 14
 366:	fe cf       	rjmp	.-4      	; 0x364 <yellow+0x60>
	{
	}
	
	//LED #3
	//blue
	SPDR = 0;
 368:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 36a:	77 9b       	sbis	0x0e, 7	; 14
 36c:	fe cf       	rjmp	.-4      	; 0x36a <yellow+0x66>
	{
	}
	
	//LED #4
	//green
	SPDR = 255;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 372:	77 9b       	sbis	0x0e, 7	; 14
 374:	fe cf       	rjmp	.-4      	; 0x372 <yellow+0x6e>
	}
	
	//LED #4
	//nothing - but actually green
	//lower green
	SPDR =0;
 376:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 378:	77 9b       	sbis	0x0e, 7	; 14
 37a:	fe cf       	rjmp	.-4      	; 0x378 <yellow+0x74>
	{
	}
	
	//LED #4
	//red
	SPDR = 255;
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 380:	77 9b       	sbis	0x0e, 7	; 14
 382:	fe cf       	rjmp	.-4      	; 0x380 <yellow+0x7c>
	}
	
	
	//LED #4
	//blue
	SPDR = 0;
 384:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <yellow+0x82>
	{
	}
	
	//LED #5
	//nothing
	SPDR = 0;
 38a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 38c:	77 9b       	sbis	0x0e, 7	; 14
 38e:	fe cf       	rjmp	.-4      	; 0x38c <yellow+0x88>
	{
	}
	
	//LED #5
	//green
	SPDR = 255;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 394:	77 9b       	sbis	0x0e, 7	; 14
 396:	fe cf       	rjmp	.-4      	; 0x394 <yellow+0x90>
	{
	}
	
	//LED #5
	//red
	SPDR = 255;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 39c:	77 9b       	sbis	0x0e, 7	; 14
 39e:	fe cf       	rjmp	.-4      	; 0x39c <yellow+0x98>
	{
	}
	
	//LED #5
	//nothing/blue overlap
	SPDR = 0;
 3a0:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3a2:	77 9b       	sbis	0x0e, 7	; 14
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <yellow+0x9e>
	{
	}
	
	//LED #5
	//blue
	SPDR = 0;
 3a6:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <yellow+0xa4>
	{
	}
	
	//LED #6
	//green
	SPDR = 255;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3b0:	77 9b       	sbis	0x0e, 7	; 14
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <yellow+0xac>
	{
	}
	
	//LED #6
	//nothing
	SPDR =0;
 3b4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3b6:	77 9b       	sbis	0x0e, 7	; 14
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <yellow+0xb2>
	{
	}
	
	//LED #6
	//red
	SPDR = 255;
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3be:	77 9b       	sbis	0x0e, 7	; 14
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <yellow+0xba>
	{
	}
	
	//LED #6
	//blue
	SPDR = 0;
 3c2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3c4:	77 9b       	sbis	0x0e, 7	; 14
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <yellow+0xc0>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 3c8:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <yellow+0xc6>
	{
	}
	
	//LED #7
	//green
	SPDR =255;
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3d2:	77 9b       	sbis	0x0e, 7	; 14
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <yellow+0xce>
	{
	}
	
	//LED #7
	//red
	SPDR =255;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3da:	77 9b       	sbis	0x0e, 7	; 14
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <yellow+0xd6>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 3de:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3e0:	77 9b       	sbis	0x0e, 7	; 14
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <yellow+0xdc>
	{
	}
	
	//LED #7
	//blue
	SPDR = 0;
 3e4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3e6:	77 9b       	sbis	0x0e, 7	; 14
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <yellow+0xe2>
	{
	}
	
	//LED #8
	//green
	SPDR = 255;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <yellow+0xea>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 3f2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <yellow+0xf0>
	{
	}
	
	//LED #8
	//red
	SPDR = 255;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 3fc:	77 9b       	sbis	0x0e, 7	; 14
 3fe:	fe cf       	rjmp	.-4      	; 0x3fc <yellow+0xf8>
	{
	}
	
	//LED #8
	//blue
	SPDR = 0;
 400:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 402:	77 9b       	sbis	0x0e, 7	; 14
 404:	fe cf       	rjmp	.-4      	; 0x402 <yellow+0xfe>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 406:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 408:	77 9b       	sbis	0x0e, 7	; 14
 40a:	fe cf       	rjmp	.-4      	; 0x408 <yellow+0x104>
	{
	}

	PORTB |= (1<<Shift_Latch);
 40c:	c2 9a       	sbi	0x18, 2	; 24
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <yellow+0x10e>
 416:	00 c0       	rjmp	.+0      	; 0x418 <yellow+0x114>
 418:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 41a:	c2 98       	cbi	0x18, 2	; 24
 41c:	08 95       	ret

0000041e <pink>:
}//end yellow
void pink (void)
{
	PORTB |= (1<<Blank_LEDS);
 41e:	c1 9a       	sbi	0x18, 1	; 24
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <pink+0x6>
 428:	00 c0       	rjmp	.+0      	; 0x42a <pink+0xc>
 42a:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Blank_LEDS);
 42c:	c1 98       	cbi	0x18, 1	; 24

	//LED #1
	//green
	SPDR =0;
 42e:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 430:	77 9b       	sbis	0x0e, 7	; 14
 432:	fe cf       	rjmp	.-4      	; 0x430 <pink+0x12>
	{
	}
	
	//LED #1
	//red
	SPDR =255;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 438:	77 9b       	sbis	0x0e, 7	; 14
 43a:	fe cf       	rjmp	.-4      	; 0x438 <pink+0x1a>
	{
	}
	
	//LED #1
	//green upper / red lower
	SPDR = 0;
 43c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 43e:	77 9b       	sbis	0x0e, 7	; 14
 440:	fe cf       	rjmp	.-4      	; 0x43e <pink+0x20>
	{
	}
	
	//LED #1
	//blue
	SPDR = 255;
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 446:	77 9b       	sbis	0x0e, 7	; 14
 448:	fe cf       	rjmp	.-4      	; 0x446 <pink+0x28>
	{
	}

	//LED #2
	//green
	SPDR = 0;
 44a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 44c:	77 9b       	sbis	0x0e, 7	; 14
 44e:	fe cf       	rjmp	.-4      	; 0x44c <pink+0x2e>
	{
	}
	//LED #2
	//nothing
	SPDR = 0;
 450:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 452:	77 9b       	sbis	0x0e, 7	; 14
 454:	fe cf       	rjmp	.-4      	; 0x452 <pink+0x34>
	{
	}
	//LED #2
	//red
	SPDR = 255;
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 45a:	77 9b       	sbis	0x0e, 7	; 14
 45c:	fe cf       	rjmp	.-4      	; 0x45a <pink+0x3c>
	{
	}
	//LED #2
	//blue
	SPDR = 255;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 462:	77 9b       	sbis	0x0e, 7	; 14
 464:	fe cf       	rjmp	.-4      	; 0x462 <__stack+0x3>
	{
	}
	
	////LED #3
	//nothing
	SPDR = 0;
 466:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 468:	77 9b       	sbis	0x0e, 7	; 14
 46a:	fe cf       	rjmp	.-4      	; 0x468 <__stack+0x9>
	{
	}
	
	//LED #3
	//green
	SPDR =0;
 46c:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 46e:	77 9b       	sbis	0x0e, 7	; 14
 470:	fe cf       	rjmp	.-4      	; 0x46e <__stack+0xf>
	{
	}
	
	//LED #3
	//red
	SPDR = 255;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 476:	77 9b       	sbis	0x0e, 7	; 14
 478:	fe cf       	rjmp	.-4      	; 0x476 <__stack+0x17>
	}
	
	//LED #3
	//nothing
	//lower red
	SPDR = 0;
 47a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 47c:	77 9b       	sbis	0x0e, 7	; 14
 47e:	fe cf       	rjmp	.-4      	; 0x47c <__stack+0x1d>
	{
	}
	
	//LED #3
	//blue
	SPDR = 255;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 484:	77 9b       	sbis	0x0e, 7	; 14
 486:	fe cf       	rjmp	.-4      	; 0x484 <__stack+0x25>
	{
	}
	
	//LED #4
	//green
	SPDR = 0;
 488:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 48a:	77 9b       	sbis	0x0e, 7	; 14
 48c:	fe cf       	rjmp	.-4      	; 0x48a <__stack+0x2b>
	}
	
	//LED #4
	//nothing - but actually green
	//lower green
	SPDR =0;
 48e:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 490:	77 9b       	sbis	0x0e, 7	; 14
 492:	fe cf       	rjmp	.-4      	; 0x490 <__stack+0x31>
	{
	}
	
	//LED #4
	//red
	SPDR = 255;
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 498:	77 9b       	sbis	0x0e, 7	; 14
 49a:	fe cf       	rjmp	.-4      	; 0x498 <__stack+0x39>
	}
	
	
	//LED #4
	//blue
	SPDR = 255;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4a0:	77 9b       	sbis	0x0e, 7	; 14
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <__stack+0x41>
	{
	}
	
	//LED #5
	//nothing
	SPDR = 0;
 4a4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4a6:	77 9b       	sbis	0x0e, 7	; 14
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <__stack+0x47>
	{
	}
	
	//LED #5
	//green
	SPDR = 0;
 4aa:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4ac:	77 9b       	sbis	0x0e, 7	; 14
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <__stack+0x4d>
	{
	}
	
	//LED #5
	//red
	SPDR = 255;
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4b4:	77 9b       	sbis	0x0e, 7	; 14
 4b6:	fe cf       	rjmp	.-4      	; 0x4b4 <__stack+0x55>
	{
	}
	
	//LED #5
	//nothing/blue overlap
	SPDR = 0;
 4b8:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4ba:	77 9b       	sbis	0x0e, 7	; 14
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <__stack+0x5b>
	{
	}
	
	//LED #5
	//blue
	SPDR = 255;
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4c2:	77 9b       	sbis	0x0e, 7	; 14
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <__stack+0x63>
	{
	}
	
	//LED #6
	//green
	SPDR = 0;
 4c6:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4c8:	77 9b       	sbis	0x0e, 7	; 14
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <__stack+0x69>
	{
	}
	
	//LED #6
	//nothing
	SPDR =0;
 4cc:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4ce:	77 9b       	sbis	0x0e, 7	; 14
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <__stack+0x6f>
	{
	}
	
	//LED #6
	//red
	SPDR = 255;
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4d6:	77 9b       	sbis	0x0e, 7	; 14
 4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <__stack+0x77>
	{
	}
	
	//LED #6
	//blue
	SPDR = 255;
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4de:	77 9b       	sbis	0x0e, 7	; 14
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <__stack+0x7f>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 4e2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4e4:	77 9b       	sbis	0x0e, 7	; 14
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <__stack+0x85>
	{
	}
	
	//LED #7
	//green
	SPDR =0;
 4e8:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4ea:	77 9b       	sbis	0x0e, 7	; 14
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <__stack+0x8b>
	{
	}
	
	//LED #7
	//red
	SPDR =255;
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4f2:	77 9b       	sbis	0x0e, 7	; 14
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <__stack+0x93>
	{
	}
	
	//LED #7
	//nothing
	SPDR =0;
 4f6:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 4f8:	77 9b       	sbis	0x0e, 7	; 14
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <__stack+0x99>
	{
	}
	
	//LED #7
	//blue
	SPDR = 255;
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 500:	77 9b       	sbis	0x0e, 7	; 14
 502:	fe cf       	rjmp	.-4      	; 0x500 <__stack+0xa1>
	}


	//LED #8
	//green
	SPDR = 0;
 504:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 506:	77 9b       	sbis	0x0e, 7	; 14
 508:	fe cf       	rjmp	.-4      	; 0x506 <__stack+0xa7>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 50a:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 50c:	77 9b       	sbis	0x0e, 7	; 14
 50e:	fe cf       	rjmp	.-4      	; 0x50c <__stack+0xad>
	{
	}
	
	//LED #8
	//red
	SPDR = 255;
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 514:	77 9b       	sbis	0x0e, 7	; 14
 516:	fe cf       	rjmp	.-4      	; 0x514 <__stack+0xb5>
	{
	}
	
	//LED #8
	//blue
	SPDR = 255;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 51c:	77 9b       	sbis	0x0e, 7	; 14
 51e:	fe cf       	rjmp	.-4      	; 0x51c <__stack+0xbd>
	{
	}
	
	//LED #8
	//nothing
	SPDR = 0;
 520:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while ((SPSR & (1 << SPIF)) == 0)
 522:	77 9b       	sbis	0x0e, 7	; 14
 524:	fe cf       	rjmp	.-4      	; 0x522 <__stack+0xc3>
	{
	}
	
	PORTB |= (1<<Shift_Latch);
 526:	c2 9a       	sbi	0x18, 2	; 24
 528:	8f e9       	ldi	r24, 0x9F	; 159
 52a:	9f e0       	ldi	r25, 0x0F	; 15
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <__stack+0xcd>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__stack+0xd3>
 532:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
 534:	c2 98       	cbi	0x18, 2	; 24
 536:	08 95       	ret

00000538 <__vector_6>:
	PORTB |= (1<<Shift_Latch);
	_delay_ms(1);
	PORTB &= ~(1<<Shift_Latch);
}
ISR (TIMER1_COMPA_vect)
{
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
   	green();
 55a:	2c de       	rcall	.-936    	; 0x1b4 <green>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	82 e5       	ldi	r24, 0x52	; 82
 560:	97 e0       	ldi	r25, 0x07	; 7
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <__vector_6+0x2a>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <__vector_6+0x34>
 56c:	00 00       	nop
   	_delay_ms(150);
   	blank();
 56e:	a7 de       	rcall	.-690    	; 0x2be <blank>
 570:	2f e7       	ldi	r18, 0x7F	; 127
 572:	8a e1       	ldi	r24, 0x1A	; 26
 574:	96 e0       	ldi	r25, 0x06	; 6
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <__vector_6+0x3e>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <__vector_6+0x48>
 580:	00 00       	nop
   	_delay_ms(125);
   	
   	green();
 582:	18 de       	rcall	.-976    	; 0x1b4 <green>
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	82 e5       	ldi	r24, 0x52	; 82
 588:	97 e0       	ldi	r25, 0x07	; 7
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <__vector_6+0x52>
 592:	00 c0       	rjmp	.+0      	; 0x594 <__vector_6+0x5c>
 594:	00 00       	nop
   	_delay_ms(150);
   	blank();
 596:	93 de       	rcall	.-730    	; 0x2be <blank>
	TCNT1=0;
 598:	1d bc       	out	0x2d, r1	; 45
 59a:	1c bc       	out	0x2c, r1	; 44
}
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <__vector_3>:
ISR(TIMER2_COMP_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
	TCNT2=0;
 5c8:	14 bc       	out	0x24, r1	; 36
}
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <turnOnDebug>:
turnOnDebug()
{
	PORTD |= (1<<PIND1);
 5d4:	91 9a       	sbi	0x12, 1	; 18
 5d6:	08 95       	ret

000005d8 <turnOffDebug>:
}
turnOffDebug()
{
	PORTD &= ~(1<<PIND1);
 5d8:	91 98       	cbi	0x12, 1	; 18
 5da:	08 95       	ret

000005dc <getMotor1Temp>:
void getMotor1Temp (void)
{
	//0 in Mux0, 1 in Mux 1 - Actives MUXLINE2
	//ADMUX &= ~(1<<MUX0);
	//ADMUX |= (1<<MUX1);
	ADMUX |= (1<<MUX1)|(1<<MUX0);
 5dc:	87 b1       	in	r24, 0x07	; 7
 5de:	83 60       	ori	r24, 0x03	; 3
 5e0:	87 b9       	out	0x07, r24	; 7
 5e2:	8f e3       	ldi	r24, 0x3F	; 63
 5e4:	9c e9       	ldi	r25, 0x9C	; 156
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <getMotor1Temp+0xa>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <getMotor1Temp+0x10>
 5ec:	00 00       	nop

	_delay_ms(10);
	ADCSRA |= (1<<ADSC);
 5ee:	36 9a       	sbi	0x06, 6	; 6
 5f0:	8f e3       	ldi	r24, 0x3F	; 63
 5f2:	9c e9       	ldi	r25, 0x9C	; 156
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <getMotor1Temp+0x18>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <getMotor1Temp+0x1e>
 5fa:	00 00       	nop
// 		{
// 			//This while loop waits until the "ADC Complete Flag" is set.
// 		}
		//ADCSRA |= (1<<ADIF);//Writing a one here clears the "ADC Complete Flag"
		
	if (ADCH >= 63)	
 5fc:	85 b1       	in	r24, 0x05	; 5
 5fe:	8f 33       	cpi	r24, 0x3F	; 63
 600:	28 f0       	brcs	.+10     	; 0x60c <getMotor1Temp+0x30>
	{
		//Motors = yellow
		turnOnDebug();
 602:	e8 df       	rcall	.-48     	; 0x5d4 <turnOnDebug>
		showHotMotors=true;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	80 93 60 00 	sts	0x0060, r24
 60a:	08 95       	ret
	}
	else
	{	
		turnOffDebug();
 60c:	e5 df       	rcall	.-54     	; 0x5d8 <turnOffDebug>
		showHotMotors=false;
 60e:	10 92 60 00 	sts	0x0060, r1
 612:	08 95       	ret

00000614 <main>:
bool showHotMotors = false;

int main(void)
{
	//SPI Setup
	DDRB = (1 << Serial_Clock) | (1 << Serial_Data) | (1 << Shift_Latch) | (1<<Blank_LEDS);
 614:	8e e2       	ldi	r24, 0x2E	; 46
 616:	87 bb       	out	0x17, r24	; 23
	//Enable SPI, Master Mode, Fosc/16
	SPCR = (1<<SPE)|(1<<MSTR)|(SPR0);
 618:	80 e5       	ldi	r24, 0x50	; 80
 61a:	8d b9       	out	0x0d, r24	; 13
			
	//ADC Setup
	ADCSRA |= (1<<ADFR)|(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 61c:	86 b1       	in	r24, 0x06	; 6
 61e:	87 62       	ori	r24, 0x27	; 39
 620:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<ADLAR);//Use External
 622:	3d 9a       	sbi	0x07, 5	; 7
	//ADMUX |= (1<<ADLAR)|(1<<REFS0); //Use AVCC (5V)
	ADCSRA |= (1<<ADEN);
 624:	37 9a       	sbi	0x06, 7	; 6
			
	//Timer1 Setup
	//This timer is used to flash two green lights once every two seconds if no error condition occurs
	//TCCR1B |= (1<<CS12) | (1<<CS10) |(1<<WGM12); //Prescale clock by 1024
	TCCR1B |= (1<<CS12) | (1<<CS10); //Prescale clock by 1024
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	85 60       	ori	r24, 0x05	; 5
 62a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);
 62c:	89 b7       	in	r24, 0x39	; 57
 62e:	80 61       	ori	r24, 0x10	; 16
 630:	89 bf       	out	0x39, r24	; 57
	OCR1A = 31250;//every two seconds, blink LEDS if nothing else is happening
 632:	82 e1       	ldi	r24, 0x12	; 18
 634:	9a e7       	ldi	r25, 0x7A	; 122
 636:	9b bd       	out	0x2b, r25	; 43
 638:	8a bd       	out	0x2a, r24	; 42
	TCNT1= 0;
 63a:	1d bc       	out	0x2d, r1	; 45
 63c:	1c bc       	out	0x2c, r1	; 44
	
	//Timer2 Setup
 	TCCR2 |= (1<<CS22)|(1<<CS21)|(1<<CS20)|(1<<WGM21);
 63e:	85 b5       	in	r24, 0x25	; 37
 640:	8f 60       	ori	r24, 0x0F	; 15
 642:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
 644:	89 b7       	in	r24, 0x39	; 57
 646:	80 68       	ori	r24, 0x80	; 128
 648:	89 bf       	out	0x39, r24	; 57
 	OCR2 = 255;
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	83 bd       	out	0x23, r24	; 35
 	TCNT2 = 0;
 64e:	14 bc       	out	0x24, r1	; 36
 	TIFR = 1 << OCF2;
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	88 bf       	out	0x38, r24	; 56
	
	sei();
 654:	78 94       	sei
	
	DDRD |= (1<<PIND1);
 656:	89 9a       	sbi	0x11, 1	; 17
	turnOnDebug();
 658:	bd df       	rcall	.-134    	; 0x5d4 <turnOnDebug>
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	89 e6       	ldi	r24, 0x69	; 105
 65e:	98 e1       	ldi	r25, 0x18	; 24
 660:	21 50       	subi	r18, 0x01	; 1
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	90 40       	sbci	r25, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <main+0x4c>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x56>
 66a:	00 00       	nop
	_delay_ms(500);
	turnOffDebug();
 66c:	b5 df       	rcall	.-150    	; 0x5d8 <turnOffDebug>
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	83 ec       	ldi	r24, 0xC3	; 195
 672:	99 e0       	ldi	r25, 0x09	; 9
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x60>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x6a>
 67e:	00 00       	nop
			cli();//dont allow double green flash, since an error condition is true
 			yellow();
 			_delay_ms(500);
 			
 		}
 		if ((showHotMotors==false) & (showLow12V==false) & (showLow24V==false))
 680:	c1 e0       	ldi	r28, 0x01	; 1
	turnOffDebug();
	_delay_ms(200);
	 		
    while(1)
    {
 		get12VBattery();
 682:	ed dc       	rcall	.-1574   	; 0x5e <get12VBattery>
		get24VBattery();
 684:	ff dc       	rcall	.-1538   	; 0x84 <get24VBattery>
 		getMotor1Temp();
 686:	aa df       	rcall	.-172    	; 0x5dc <getMotor1Temp>
 		showHotMotors=false;
 688:	10 92 60 00 	sts	0x0060, r1
		//showLow12V=false;
		//showLow24V=true;
 		if (showLow12V==true)
 68c:	80 91 62 00 	lds	r24, 0x0062
 690:	88 23       	and	r24, r24
 692:	59 f0       	breq	.+22     	; 0x6aa <main+0x96>
 		{
			cli();//dont allow double green flash, since an error condition is true
 694:	f8 94       	cli
 			red();
 696:	09 dd       	rcall	.-1518   	; 0xaa <red>
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	89 e6       	ldi	r24, 0x69	; 105
 69c:	98 e1       	ldi	r25, 0x18	; 24
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x8a>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x94>
 6a8:	00 00       	nop
 			_delay_ms(500);
 		}
		if (showLow24V==true)
 6aa:	80 91 61 00 	lds	r24, 0x0061
 6ae:	88 23       	and	r24, r24
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <main+0xb4>
		{
			cli();//dont allow double green flash, since an error condition is true
 6b2:	f8 94       	cli
			pink();
 6b4:	b4 de       	rcall	.-664    	; 0x41e <pink>
 6b6:	2f ef       	ldi	r18, 0xFF	; 255
 6b8:	89 e6       	ldi	r24, 0x69	; 105
 6ba:	98 e1       	ldi	r25, 0x18	; 24
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	80 40       	sbci	r24, 0x00	; 0
 6c0:	90 40       	sbci	r25, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <main+0xa8>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0xb2>
 6c6:	00 00       	nop
			_delay_ms(500);
		}		 
 		if (showHotMotors==true)
 6c8:	80 91 60 00 	lds	r24, 0x0060
 6cc:	88 23       	and	r24, r24
 6ce:	59 f0       	breq	.+22     	; 0x6e6 <main+0xd2>
 		{
			cli();//dont allow double green flash, since an error condition is true
 6d0:	f8 94       	cli
 			yellow();
 6d2:	18 de       	rcall	.-976    	; 0x304 <yellow>
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	89 e6       	ldi	r24, 0x69	; 105
 6d8:	98 e1       	ldi	r25, 0x18	; 24
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0xc6>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0xd0>
 6e4:	00 00       	nop
 			_delay_ms(500);
 			
 		}
 		if ((showHotMotors==false) & (showLow12V==false) & (showLow24V==false))
 6e6:	90 91 62 00 	lds	r25, 0x0062
 6ea:	9c 27       	eor	r25, r28
 6ec:	80 91 60 00 	lds	r24, 0x0060
 6f0:	8c 27       	eor	r24, r28
 6f2:	89 23       	and	r24, r25
 6f4:	31 f2       	breq	.-116    	; 0x682 <main+0x6e>
 6f6:	80 91 61 00 	lds	r24, 0x0061
 6fa:	8c 17       	cp	r24, r28
 6fc:	09 f4       	brne	.+2      	; 0x700 <main+0xec>
 6fe:	c1 cf       	rjmp	.-126    	; 0x682 <main+0x6e>
 		{
			 sei();// ALLOW double green flash - no errors exist
 700:	78 94       	sei
 702:	bf cf       	rjmp	.-130    	; 0x682 <main+0x6e>

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
